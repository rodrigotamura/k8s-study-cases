apiVersion: apps/v1
kind: Deployment
metadata:
  name: goserver
  labels:
    app: goserver
spec:
  selector:  # seleciona a label
    matchLabels:
      app: goserver
  replicas: 1 # qnt de replicas que queremos
  # agora precisamos indicar os pods, e podemos fazer isso via templates
  # na verdade seria a especificação que está no arquivo de pod.yaml
  template:
    metadata:
      name: "goserver" # nome do pod
      # etiqueta que ajudam a fazer filtros, buscas, regras, etc.
      labels:
        app: "goserver"
    spec:
      # via de regra eh um container por pod
      containers:
        - name: "goserver"
          image: "rodrigotamura/hello-go:v9"

          resources:
            requests: # o quanto que o container exige como MINIMO para funcionar
                      # se não tivermos este minimo, esse container nem vai rodar
                      # ESTAMOS RESERVANDO ESTES RECURSOS 
              # cpu: 100m # pegando no minimo 100 milicores do cluster
              cpu: "0.3" # 30%
              memory: 20Mi # pegando no minimo 20 MB do cluster
            limits: # até onde esse pod poderá consumir no cluster
              # cpu: 500m
              cpu: "0.3" # 30%
              memory: 25Mi

          startupProbe:
            httpGet:
              path: /healthz
              port: 8000
            periodSeconds: 4
            failureThreshold: 30

          readinessProbe:
            httpGet:
              path: /healthz
              port: 8000
            periodSeconds: 3
            failureThreshold: 1
            # initialDelaySeconds: 15 # não precisa mais pois o startupProbe já verificou

          livenessProbe:
            httpGet: # lembrando que temos http | tcp | command
              path: /healthz
              port: 8000 # porta do container, não da service
            periodSeconds: 5 # tempo em segundos que será realizada a verificação
            # as propriedades a seguir são opcionais e assumem um default - ver doc
            failureThreshold: 1 # qnt vezes de quando der problema reinicia o pod
            timeoutSeconds: 1 # se exceder, conta como um failure
            # aqui temos que ficar mais atento, pois se o endpoint for um fluxo
            # que tenha um banco de dados, por exemplo, este tempo será 
            # considerado também
            successThreshold: 1 # qnt vezes testa e dá tudo ok para aplicação estar saudável
            # initialDelaySeconds: 15 # não precisa mais pois o startupProbe já verificou

          envFrom:
            - configMapRef:
                name: goserver-env # indicar o nome do configFile
            - secretRef:
                name: goserver-secret # indicar o nome do secret aplicado
          
          volumeMounts:
            - mountPath: "/go/myfamily" # onde o volume será montado no container 
              name: config # nome do volumes.name

      volumes:
        - name: config # aqui pode colocar o nome que quiser
          configMap:
            name: configmap-family # nome do config map criado
            items: # quais itens queremos montar para esse volume
              - key: members # data mapeado lá no configmap-family.yaml
                path: "family.txt" # nome do arquivo que será criado